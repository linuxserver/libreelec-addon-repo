#!/bin/sh

name="$(basename $0)"
. /etc/profile

if [ -f /storage/.cache/timezone ]; then
 . /storage/.cache/timezone
else
 TIMEZONE="America/New_York"
fi

oe_setup_addon "$name"

#set image name
DOCKERIMAGE="linuxserver/jellyfin"

#set image tag
if [ "$E_beta" = "true" ]; then
  IMAGETAG="nightly"
else
  IMAGETAG="latest"
fi

#set uid/gid
if [ "$E_manual_uid" = "false" ]; then
  E_PUID="65534"
  E_PGID="100"
fi

#set hw transcode options
if [ -d "/dev/dri" ]; then
  D_vaapi_args="--device /dev/dri:/dev/dri"
  echo "/dev/dri found, mapping device"
else
  echo "/dev/dri not found, skipping vaapi hw transcode"
fi
if [ -c "/dev/vchiq" ] && [ -f "/opt/vc/lib/libopenmaxil.so" ] && [ -f "/opt/vc/lib/libbcm_host.so" ]; then
  echo "OpenMax (omx) libraries and device found, enabling"
  chmod g+rw /dev/vchiq
  D_openmax_args="--device /dev/vchiq:/dev/vchiq --device /dev/vc-mem:/dev/vc-mem -v /opt/vc/lib/libopenmaxil.so:/opt/vc/lib/libopenmaxil.so -v /opt/vc/lib/libbcm_host.so:/opt/vc/lib/libbcm_host.so"
else
  echo "OpenMax (omx) libraries and device not found, skipping"
fi
if [ -c "/dev/video10" ] && [ -c "/dev/video11" ] && [ -c "/dev/video12" ]; then
  echo "V4L2 devices found, enabling"
  D_v4l2_args="--device /dev/video10 --device /dev/video11 --device /dev/video12"
else
  echo "V4L2 devices not found, skipping"
fi

#set networking
if [ "$E_net_host" = "true" ]; then
  E_net_arg="--net=host"
else
  E_net_arg="--net=lsio"
fi

# add image to cron updater list
if [ ! -f /storage/.kodi/userdata/addon_data/docker.linuxserver.updater/update.sh ]; then
  sleep 10
fi

if ! grep -q "$DOCKERIMAGE":"$IMAGETAG" /storage/.kodi/userdata/addon_data/docker.linuxserver.updater/update.sh; then
  echo "/storage/.kodi/addons/service.system.docker/bin/docker pull $DOCKERIMAGE":"$IMAGETAG" >> /storage/.kodi/userdata/addon_data/docker.linuxserver.updater/update.sh
fi

docker rm "$name" 2>/dev/null
docker rmi $(docker images | grep "$DOCKERIMAGE" | grep '<none>' | sed 's/\s\+/\t/g' | cut -f3) 2> /dev/null
mkdir -p "$V_config" "$V_data_tvshows" "$V_data_movies"
for i in "$V_config" "$V_data_tvshows" "$V_data_movies"; do
  if [ ! "$(ls -nd $i | awk '{print $3}')" = "$E_PUID" ]; then
    echo "attempting chown ${E_PUID}/${E_PGID} on $i"
    chown -R "${E_PUID}":"${E_PGID}" "$i" 2>&1 >/dev/null
    echo "chown attempt completed, moving on"
  else
    echo "skipping chown, make sure the folder $i is accessible by the user ${E_PUID}:${E_PGID}"
  fi
done
docker run --name="$name" \
           --rm \
           $E_net_arg \
           --hostname="Jellyfin-LibreELEC" \
           -e WARNING_MSG="DO NOT CONTROL THIS IN PORTAINER!" \
           -e PUID="$E_PUID" \
           -e PGID="$E_PGID" \
           -e TZ="$TIMEZONE" \
           -p "$P_port":8096 \
           -v "$V_config":/config \
           -v "$V_data_tvshows":/data/tvshows \
           -v "$V_data_movies":/data/movies \
           $D_vaapi_args \
           $D_openmax_args \
           $D_v4l2_args \
           $E_additional \
           "$DOCKERIMAGE":"$IMAGETAG"
