#!/bin/sh

name="$(basename $0)"
. /etc/profile

if [ -f /storage/.cache/timezone ]; then
 . /storage/.cache/timezone
else
 TIMEZONE="America/New_York"
fi

oe_setup_addon "$name"

#get arch variable from os
LEARCHVAR=`sed -e '/LIBREELEC_ARCH/ !d' -e 's/[^.]*\.\([^"]*\).*/\1/' /etc/os-release`

# wait for password
while [ "$E_pass" = "" ]; do
  echo "Enter admin password in addon settings to continue"
  sleep 60
done

#figure out which docker hub image to use
if [ "$LEARCHVAR" = "x86_64" ]; then
  DOCKERIMAGE="diginc/pi-hole"
  DOCKERIMAGETAG="latest"
elif [ "$LEARCHVAR" = "arm" ]; then
  DOCKERIMAGE="diginc/pi-hole-multiarch"
  DOCKERIMAGETAG="debian_armhf"
elif [ "$LEARCHVAR" = "aarch64" ]; then
  DOCKERIMAGE="diginc/pi-hole-multiarch"
  DOCKERIMAGETAG="debian_aarch64"
fi

# set server IP
if [ "$E_IP_OR" = "true" ]; then
  IPv4="$E_IP"
else
  IPv4="$(ip route get 8.8.8.8 | awk '{ print $NF; exit }')"
fi

# enable and set server IPv6
if [ "$E_IPv6_EN" = "true" ]; then
  if [ "$E_IPv6_OR" = "true" ]; then
    IPv6="$E_IPv6"
  else
    IPv6="$(ip -6 route get 2001:4860:4860::8888 | awk '{ print $10; exit }')"
  fi
  IPv6_EN="-e ServerIPv6=$IPv6"
fi

# add image to cron updater list
if [ ! -f /storage/.kodi/userdata/addon_data/docker.linuxserver.updater/update.sh ]; then
  sleep 10
fi

if ! grep -q "$DOCKERIMAGE" /storage/.kodi/userdata/addon_data/docker.linuxserver.updater/update.sh; then
  echo "/storage/.kodi/addons/service.system.docker/bin/docker pull ${DOCKERIMAGE}:${DOCKERIMAGETAG}" >> /storage/.kodi/userdata/addon_data/docker.linuxserver.updater/update.sh
fi

docker rm "$name" 2>/dev/null
docker rmi $(docker images | grep "$DOCKERIMAGE" | grep '<none>' | sed 's/\s\+/\t/g' | cut -f3) 2> /dev/null
docker run --name="$name" \
           --rm \
           -e WARNING_MSG="DO NOT CONTROL THIS IN PORTAINER!" \
           -e PUID="65534" \
           -e PGID="100" \
           -e TZ="$TIMEZONE" \
           -e ServerIP="$IPv4" \
           $IPv6_EN \
           -e WEBPASSWORD="$E_pass" \
           -v "$V_pihole":/etc/pihole \
           -v "$V_dnsmasq":/etc/dnsmasq.d \
           -p 53:53/tcp \
           -p 53:53/udp \
           -p "$P_port":80 \
           --network=lsio \
           --network-alias=pi-hole \
           "$DOCKERIMAGE":"$DOCKERIMAGETAG"
